// Mocks generated by Mockito 5.3.2 from annotations
// in deriv_test/test/data/repos/price_tracker_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:deriv_test/core/utils/socket_response.dart' as _i2;
import 'package:deriv_test/domain/repos/price_tracker_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTicksResponse_0<T> extends _i1.SmartFake
    implements _i2.TicksResponse<T> {
  _FakeTicksResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IPriceTrackerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPriceTrackerService extends _i1.Mock
    implements _i3.IPriceTrackerService {
  MockIPriceTrackerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<Map<String, dynamic>>> getSymbols() => (super.noSuchMethod(
        Invocation.method(
          #getSymbols,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);
  @override
  _i2.TicksResponse<_i4.Stream<String>> getTicks(String? symbolId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTicks,
          [symbolId],
        ),
        returnValue: _FakeTicksResponse_0<_i4.Stream<String>>(
          this,
          Invocation.method(
            #getTicks,
            [symbolId],
          ),
        ),
      ) as _i2.TicksResponse<_i4.Stream<String>>);
}
