// Mocks generated by Mockito 5.3.2 from annotations
// in deriv_test/test/domain/usecases/get_active_symbols_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:deriv_test/core/utils/app_error.dart' as _i5;
import 'package:deriv_test/core/utils/socket_response.dart' as _i7;
import 'package:deriv_test/domain/entities/market.dart' as _i6;
import 'package:deriv_test/domain/repos/price_tracker_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IPriceTrackerRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPriceTrackerRepo extends _i1.Mock implements _i3.IPriceTrackerRepo {
  MockIPriceTrackerRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2
          .Either<_i5.AppError, _i4.Stream<List<_i6.Market>>>> getSymbols() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSymbols,
          [],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppError, _i4.Stream<List<_i6.Market>>>>.value(
            _FakeEither_0<_i5.AppError, _i4.Stream<List<_i6.Market>>>(
          this,
          Invocation.method(
            #getSymbols,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, _i4.Stream<List<_i6.Market>>>>);
  @override
  _i4.Future<
      _i2.Either<_i5.AppError,
          _i7.ResponseWithSubId<_i4.Stream<num>>>> getTicks(String? symbolId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTicks,
          [symbolId],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.AppError,
                    _i7.ResponseWithSubId<_i4.Stream<num>>>>.value(
            _FakeEither_0<_i5.AppError, _i7.ResponseWithSubId<_i4.Stream<num>>>(
          this,
          Invocation.method(
            #getTicks,
            [symbolId],
          ),
        )),
      ) as _i4.Future<
          _i2.Either<_i5.AppError, _i7.ResponseWithSubId<_i4.Stream<num>>>>);
  @override
  _i4.Future<_i2.Either<_i5.AppError, void>> forget(int? requestId) =>
      (super.noSuchMethod(
        Invocation.method(
          #forget,
          [requestId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AppError, void>>.value(
            _FakeEither_0<_i5.AppError, void>(
          this,
          Invocation.method(
            #forget,
            [requestId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppError, void>>);
}
